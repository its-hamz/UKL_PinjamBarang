// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  Id        Int      @id @default(autoincrement())
  username  String   @default("")
  userpass  String   @default("")
  role      role
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  returnRecord returnRecord[]
  borrow       borrowRecord[]
}

model item {
  Id        Int      @id @default(autoincrement())
  category  String   @default("")
  location  String   @default("")
  qty       Int      @default(0)
  name      String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  returnRecord returnRecord[]
  borrow       borrowRecord[]
}

model borrowRecord {
  borrowId   Int      @id @default(autoincrement())
  itemId     Int      @default(0)
  userId     Int      @default(0)
  borrowDate DateTime @default(now())
  returnDate DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  returRecord returnRecord[]
  UserId      User           @relation(fields: [userId], references: [Id])
  ItemId      item           @relation(fields: [itemId], references: [Id])
}

model returnRecord {
  Id       Int @id @default(autoincrement())
  borrowId Int @unique
  itemId   Int @default(0)
  userId   Int @default(0)
  actualReturnDate DateTime

  borrowRecord borrowRecord @relation(fields: [borrowId], references: [borrowId])
  user         User         @relation(fields: [userId], references: [Id])
  item         item         @relation(fields: [itemId], references: [Id])
}

enum Status {
  success
  failed
}

enum role {
  admin
  user
}
